<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>VulnCheck Report</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root{
      --bg:#0b1020; --panel:#12182a; --text:#e8ecf1; --muted:#9aa4b2;
      --ok:#10b981; --low:#6b7280; --med:#f59e0b; --high:#f97316; --crit:#ef4444; --line:#223
    }
    body.light { --bg:#ffffff; --panel:#f8fafc; --text:#0f172a; --muted:#64748b; --line:#e5e7eb }
    *{box-sizing:border-box}
    body{background:var(--bg);color:var(--text);font-family:system-ui,Segoe UI,Arial;margin:0}
    .container{max-width:1100px;margin:24px auto;padding:0 16px}
    .header{display:flex;justify-content:space-between;align-items:center;gap:12px;margin-bottom:12px}
    .brand{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
    .pill{padding:6px 10px;border:1px solid var(--line);border-radius:999px;font-size:12px;color:var(--muted)}
    .btn{padding:8px 12px;border:1px solid var(--line);border-radius:10px;background:transparent;color:var(--text);cursor:pointer}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    .card{background:var(--panel);border:1px solid var(--line);border-radius:14px;padding:14px}
    .badge{display:inline-block;padding:2px 8px;border-radius:8px;color:white;font-size:12px}
    .b-Low{background:var(--low)} .b-Medium{background:var(--med)} .b-High{background:var(--high)} .b-Critical{background:var(--crit)}
    .kpi{display:flex;gap:10px;align-items:center}
    .row{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
    .muted{color:var(--muted)}
    input,select{background:transparent;border:1px solid var(--line);border-radius:8px;padding:6px 10px;color:var(--text)}
    details{border:1px solid var(--line);border-radius:10px;padding:10px;background:rgba(255,255,255,.02)}
    summary{cursor:pointer;font-weight:600}
    code{white-space:pre-wrap}
    table{width:100%;border-collapse:collapse}
    th,td{border-bottom:1px solid var(--line);padding:10px;text-align:left;font-size:14px}
    th{color:var(--muted)}
    @media (max-width:900px){ .grid{grid-template-columns:1fr} }
  </style>
</head>
<body class="light">
  <div class="container">
    <div class="header">
      <div class="brand">
        <h1 style="margin:0;">VulnCheck Report</h1>
        <span class="pill">Host: {{ host.hostname }}</span>
        <span class="pill">OS: {{ host.os }}</span>
        {% if host.detail %}<span class="pill">{{ host.detail }}</span>{% endif %}
        <span class="pill">Generated: {{ meta.generated }}</span>
      </div>
      <div class="row">
        <button id="modeBtn" class="btn">Toggle Dark/Light</button>
        <a class="btn" href="findings.csv" download>Download CSV</a>
      </div>
    </div>

    <div class="grid">
      <div class="card">
        <h2 style="margin-top:0;">Overall Risk</h2>
        <div class="kpi">
          <!-- Donut gauge -->
          <svg width="120" height="120" viewBox="0 0 42 42">
            <circle cx="21" cy="21" r="15.915" fill="transparent" stroke="var(--line)" stroke-width="6"></circle>
            {% set pct = summary.score %}
            <circle cx="21" cy="21" r="15.915" fill="transparent"
              stroke="{% if pct>=85 %}var(--ok){% elif pct>=70 %}var(--low){% elif pct>=50 %}var(--med){% elif pct>=30 %}var(--high){% else %}var(--crit){% endif %}"
              stroke-width="6" stroke-dasharray="{{ pct }} {{ 100-pct }}" stroke-dashoffset="25"></circle>
          </svg>
          <div>
            <div style="font-size:36px;font-weight:800">{{ summary.score }}</div>
            <div class="muted">/ 100</div>
            <div class="muted">{{ summary.summary_text }}</div>
          </div>
        </div>
      </div>

      <div class="card">
        <h2 style="margin-top:0;">At a Glance</h2>
        <div style="display:flex;gap:10px;align-items:center;flex-wrap:wrap">
          <span class="badge b-Critical">Critical: {{ counts.Critical }}</span>
          <span class="badge b-High">High: {{ counts.High }}</span>
          <span class="badge b-Medium">Medium: {{ counts.Medium }}</span>
          <span class="badge b-Low">Low: {{ counts.Low }}</span>
        </div>
        <!-- Severity bar -->
        <div style="height:10px;border-radius:6px;background:var(--line);margin-top:10px;overflow:hidden;display:flex">
          {% set total = counts.Critical + counts.High + counts.Medium + counts.Low %}
          {% set t = total if total>0 else 1 %}
          <div style="width:{{ (counts.Critical/t)*100 }}%;background:var(--crit)"></div>
          <div style="width:{{ (counts.High/t)*100 }}%;background:var(--high)"></div>
          <div style="width:{{ (counts.Medium/t)*100 }}%;background:var(--med)"></div>
          <div style="width:{{ (counts.Low/t)*100 }}%;background:var(--low)"></div>
        </div>
      </div>
    </div>

    <div class="card" style="margin-top:12px;">
      <h2 style="margin-top:0;">Top Recommendations</h2>
      <ol>
        {% for r in top_recos %}<li>{{ r }}</li>{% endfor %}
      </ol>
    </div>

    <div class="card" style="margin-top:12px;">
      <div class="row" style="justify-content:space-between;">
        <h2 style="margin:0;">Findings</h2>
        <div class="row">
          <input id="search" placeholder="Search title/remediation..." />
          <select id="sevFilter">
            <option value="">All severities</option>
            <option>Critical</option>
            <option>High</option>
            <option>Medium</option>
            <option>Low</option>
          </select>
        </div>
      </div>

      <div id="findingsList" style="margin-top:10px;display:flex;flex-direction:column;gap:10px">
        {% for f in findings %}
        <details class="finding" data-sev="{{ f.severity }}">
          <summary>
            <span class="badge b-{{ f.severity }}">{{ f.severity }}</span>
            <strong style="margin-left:8px">{{ f.title }}</strong>
            <span class="muted" style="margin-left:8px">CVSS {{ "%.1f"|format(f.cvss) }}</span>
          </summary>
          <div style="margin-top:8px">
            <div><strong>ID:</strong> {{ f.id }}</div>
            <div><strong>Remediation:</strong> {{ f.remediation }}</div>
            <div style="margin-top:8px">
              <strong>Evidence:</strong>
              <pre style="white-space:pre-wrap;background:rgba(255,255,255,.03);padding:8px;border-radius:8px;border:1px solid var(--line)"><code>{{ f.evidence }}</code></pre>
            </div>
            <button class="btn copyBtn" data-text="{{ f.remediation|e }}">Copy remediation</button>
          </div>
        </details>
        {% endfor %}
      </div>
    </div>

    <p class="muted" style="margin:14px 4px;">
      Note: CVSS values for configuration & exposure risks are heuristic for this MVP. Replace or augment with actual CVEs as needed.
    </p>
  </div>

  <script>
    // Dark / Light mode
    const body = document.body;
    const modeBtn = document.getElementById('modeBtn');
    function setMode(m){ body.classList.toggle('light', m==='light'); localStorage.setItem('vuln_mode', m); }
    const saved = localStorage.getItem('vuln_mode') || 'light'; setMode(saved);
    modeBtn.addEventListener('click', ()=> setMode(body.classList.contains('light') ? 'dark' : 'light'));

    // Search + Severity filter
    const search = document.getElementById('search');
    const sevFilter = document.getElementById('sevFilter');
    const items = Array.from(document.querySelectorAll('.finding'));
    function applyFilters(){
      const q = (search.value || '').toLowerCase();
      const sev = sevFilter.value;
      items.forEach(el=>{
        const text = el.innerText.toLowerCase();
        const okText = !q || text.includes(q);
        const okSev = !sev || el.dataset.sev === sev;
        el.style.display = (okText && okSev) ? '' : 'none';
      });
    }
    search.addEventListener('input', applyFilters);
    sevFilter.addEventListener('change', applyFilters);

    // Copy remediation
    document.querySelectorAll('.copyBtn').forEach(b=>{
      b.addEventListener('click', ()=>{
        navigator.clipboard.writeText(b.dataset.text);
        b.textContent = "Copied!";
        setTimeout(()=> b.textContent = "Copy remediation", 1200);
      });
    });

    try {
        webbrowser.open_new_tab("report.html")
    } catch (Exception) {}
  </script>
</body>
</html>